import { booleanAttribute, Component, HostBinding, inject, Input } from '@angular/core';
import { AccordionService } from '../accordion.service';
import * as i0 from "@angular/core";
export class AccordionComponent {
    constructor() {
        this.#accordionService = inject(AccordionService);
        /**
         * Removes the default background-color, some borders, and some rounded corners to render accordions edge-to-edge with their parent container.
         * @type boolean
         */
        this.flush = false;
    }
    #accordionService;
    /**
     * Make accordion items stay open when another item is opened
     * @type boolean
     */
    set alwaysOpen(value) {
        this.#accordionService.alwaysOpen = value;
    }
    get alwaysOpen() {
        return this.#accordionService.alwaysOpen;
    }
    get hostClasses() {
        return {
            accordion: true,
            'accordion-flush': this.flush
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: AccordionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.12", type: AccordionComponent, isStandalone: true, selector: "c-accordion", inputs: { flush: ["flush", "flush", booleanAttribute], alwaysOpen: ["alwaysOpen", "alwaysOpen", booleanAttribute] }, host: { properties: { "class": "this.hostClasses" } }, providers: [AccordionService], exportAs: ["cAccordionItem"], ngImport: i0, template: '<ng-content/>', isInline: true, styles: [":host{display:block}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: AccordionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c-accordion', template: '<ng-content/>', exportAs: 'cAccordionItem', providers: [AccordionService], standalone: true, styles: [":host{display:block}\n"] }]
        }], propDecorators: { flush: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], alwaysOpen: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hostClasses: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvYWNjb3JkaW9uL2FjY29yZGlvbi9hY2NvcmRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBVXhELE1BQU0sT0FBTyxrQkFBa0I7SUFSL0I7UUFVRyxzQkFBaUIsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUU5Qzs7O1dBR0c7UUFDcUMsVUFBSyxHQUFZLEtBQUssQ0FBQztLQXVCaEU7SUE3QkUsaUJBQWlCLENBQTRCO0lBUTlDOzs7T0FHRztJQUNILElBQ0ksVUFBVSxDQUFDLEtBQWM7UUFDM0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztJQUMzQyxDQUFDO0lBRUQsSUFDSSxXQUFXO1FBQ2IsT0FBTztZQUNMLFNBQVMsRUFBRSxJQUFJO1lBQ2YsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEtBQUs7U0FDOUIsQ0FBQztJQUNKLENBQUM7K0dBN0JVLGtCQUFrQjttR0FBbEIsa0JBQWtCLG1GQVFULGdCQUFnQiw0Q0FNaEIsZ0JBQWdCLHVFQWpCekIsQ0FBQyxnQkFBZ0IsQ0FBQyx3REFIbkIsZUFBZTs7NEZBTWQsa0JBQWtCO2tCQVI5QixTQUFTOytCQUNFLGFBQWEsWUFDYixlQUFlLFlBRWYsZ0JBQWdCLGFBQ2YsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUNqQixJQUFJOzhCQVV3QixLQUFLO3NCQUE1QyxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQU9sQyxVQUFVO3NCQURiLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBVWxDLFdBQVc7c0JBRGQsV0FBVzt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBIb3N0QmluZGluZywgaW5qZWN0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBY2NvcmRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vYWNjb3JkaW9uLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjLWFjY29yZGlvbicsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQvPicsXG4gIHN0eWxlVXJsczogWycuL2FjY29yZGlvbi5jb21wb25lbnQuc2NzcyddLFxuICBleHBvcnRBczogJ2NBY2NvcmRpb25JdGVtJyxcbiAgcHJvdmlkZXJzOiBbQWNjb3JkaW9uU2VydmljZV0sXG4gIHN0YW5kYWxvbmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uQ29tcG9uZW50IHtcblxuICAgI2FjY29yZGlvblNlcnZpY2UgPSBpbmplY3QoQWNjb3JkaW9uU2VydmljZSk7XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGRlZmF1bHQgYmFja2dyb3VuZC1jb2xvciwgc29tZSBib3JkZXJzLCBhbmQgc29tZSByb3VuZGVkIGNvcm5lcnMgdG8gcmVuZGVyIGFjY29yZGlvbnMgZWRnZS10by1lZGdlIHdpdGggdGhlaXIgcGFyZW50IGNvbnRhaW5lci5cbiAgICogQHR5cGUgYm9vbGVhblxuICAgKi9cbiAgQElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pIGZsdXNoOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIE1ha2UgYWNjb3JkaW9uIGl0ZW1zIHN0YXkgb3BlbiB3aGVuIGFub3RoZXIgaXRlbSBpcyBvcGVuZWRcbiAgICogQHR5cGUgYm9vbGVhblxuICAgKi9cbiAgQElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG4gIHNldCBhbHdheXNPcGVuKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy4jYWNjb3JkaW9uU2VydmljZS5hbHdheXNPcGVuID0gdmFsdWU7XG4gIH1cblxuICBnZXQgYWx3YXlzT3BlbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4jYWNjb3JkaW9uU2VydmljZS5hbHdheXNPcGVuO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gIGdldCBob3N0Q2xhc3NlcygpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBhY2NvcmRpb246IHRydWUsXG4gICAgICAnYWNjb3JkaW9uLWZsdXNoJzogdGhpcy5mbHVzaFxuICAgIH07XG4gIH1cblxufVxuIl19