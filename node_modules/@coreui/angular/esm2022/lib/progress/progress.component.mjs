import { NgTemplateOutlet } from '@angular/common';
import { booleanAttribute, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, HostBinding, inject, Input, numberAttribute } from '@angular/core';
import { ProgressBarComponent } from './progress-bar.component';
import { ProgressBarDirective } from './progress-bar.directive';
import { ProgressStackedComponent } from './progress-stacked.component';
import * as i0 from "@angular/core";
import * as i1 from "./progress-bar.directive";
export class ProgressComponent {
    #stacked;
    #elementRef;
    constructor() {
        this.pbd = inject(ProgressBarDirective, { optional: true });
        this.#stacked = inject(ProgressStackedComponent, { optional: true })?.stacked;
        this.#elementRef = inject(ElementRef);
        /**
         * Sets the height of the component. If you set that value the inner `<CProgressBar>` will automatically resize accordingly.
         * @type number
         */
        this.height = 0;
        /**
         * Displays thin progress.
         * @type boolean
         */
        this.thin = false;
        /**
         * Change the default color to white.
         * @type boolean
         */
        this.white = false;
        if (this.pbd) {
            this.pbd.stacked = this.#stacked;
        }
    }
    get hostClasses() {
        return {
            progress: true,
            'progress-thin': this.thin,
            'progress-white': this.white
        };
    }
    get hostStyle() {
        return !!this.height ? `${this.height}px` : this.#elementRef?.nativeElement?.style?.height ?? undefined;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: ProgressComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.12", type: ProgressComponent, isStandalone: true, selector: "c-progress", inputs: { height: ["height", "height", numberAttribute], thin: ["thin", "thin", booleanAttribute], white: ["white", "white", booleanAttribute] }, host: { properties: { "class": "this.hostClasses", "style.height": "this.hostStyle" } }, queries: [{ propertyName: "contentProgressBars", predicate: ProgressBarComponent }], hostDirectives: [{ directive: i1.ProgressBarDirective, inputs: ["animated", "animated", "color", "color", "max", "max", "role", "role", "value", "value", "variant", "variant"] }], ngImport: i0, template: "@if (contentProgressBars.length) {\n  <ng-container *ngTemplateOutlet=\"defaultContent\" />\n} @else if (pbd?.stacked) {\n  <c-progress-bar [animated]=\"pbd?.animated\" [variant]=\"pbd?.variant\" [color]=\"pbd?.color\" stacked>\n    <ng-container *ngTemplateOutlet=\"defaultContent\" />\n  </c-progress-bar>\n} @else {\n  <c-progress-bar [width]=\"pbd?.percent()\" [animated]=\"pbd?.animated\" [variant]=\"pbd?.variant\" [color]=\"pbd?.color\">\n    <ng-container *ngTemplateOutlet=\"defaultContent\" />\n  </c-progress-bar>\n}\n\n<ng-template #defaultContent>\n  <ng-content />\n</ng-template>\n\n", styles: [":host-context(.progress-stacked).progress{transition:var(--cui-progress-bar-transition)}\n"], dependencies: [{ kind: "component", type: ProgressBarComponent, selector: "c-progress-bar" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: ProgressComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c-progress', imports: [ProgressBarComponent, NgTemplateOutlet], standalone: true, hostDirectives: [{
                            directive: ProgressBarDirective,
                            inputs: ['animated', 'color', 'max', 'role', 'value', 'variant']
                        }], changeDetection: ChangeDetectionStrategy.OnPush, template: "@if (contentProgressBars.length) {\n  <ng-container *ngTemplateOutlet=\"defaultContent\" />\n} @else if (pbd?.stacked) {\n  <c-progress-bar [animated]=\"pbd?.animated\" [variant]=\"pbd?.variant\" [color]=\"pbd?.color\" stacked>\n    <ng-container *ngTemplateOutlet=\"defaultContent\" />\n  </c-progress-bar>\n} @else {\n  <c-progress-bar [width]=\"pbd?.percent()\" [animated]=\"pbd?.animated\" [variant]=\"pbd?.variant\" [color]=\"pbd?.color\">\n    <ng-container *ngTemplateOutlet=\"defaultContent\" />\n  </c-progress-bar>\n}\n\n<ng-template #defaultContent>\n  <ng-content />\n</ng-template>\n\n", styles: [":host-context(.progress-stacked).progress{transition:var(--cui-progress-bar-transition)}\n"] }]
        }], ctorParameters: () => [], propDecorators: { contentProgressBars: [{
                type: ContentChildren,
                args: [ProgressBarComponent]
            }], height: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], thin: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], white: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], hostStyle: [{
                type: HostBinding,
                args: ['style.height']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9wcm9ncmVzcy9wcm9ncmVzcy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL3Byb2dyZXNzL3Byb2dyZXNzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxlQUFlLEVBQ2YsVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUNMLGVBQWUsRUFFaEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7OztBQWN4RSxNQUFNLE9BQU8saUJBQWlCO0lBR25CLFFBQVEsQ0FBMkU7SUFDbkYsV0FBVyxDQUFzQjtJQUUxQztRQUptQixRQUFHLEdBQWdDLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzlGLGFBQVEsR0FBYSxNQUFNLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUM7UUFDbkYsZ0JBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFTMUM7OztXQUdHO1FBQ29DLFdBQU0sR0FBVyxDQUFDLENBQUM7UUFFMUQ7OztXQUdHO1FBQ3FDLFNBQUksR0FBWSxLQUFLLENBQUM7UUFFOUQ7OztXQUdHO1FBQ3FDLFVBQUssR0FBWSxLQUFLLENBQUM7UUF0QjdELElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNuQyxDQUFDO0lBQ0gsQ0FBQztJQXFCRCxJQUEwQixXQUFXO1FBQ25DLE9BQU87WUFDTCxRQUFRLEVBQUUsSUFBSTtZQUNkLGVBQWUsRUFBRSxJQUFJLENBQUMsSUFBSTtZQUMxQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSztTQUM3QixDQUFDO0lBQ0osQ0FBQztJQUVELElBQWlDLFNBQVM7UUFDeEMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDO0lBQzFHLENBQUM7K0dBekNVLGlCQUFpQjttR0FBakIsaUJBQWlCLHFGQWlCUixlQUFlLDBCQU1mLGdCQUFnQiw2QkFNaEIsZ0JBQWdCLDBKQWpCbkIsb0JBQW9CLGlOQzFDdkMsd2xCQWdCQSxvSkRLWSxvQkFBb0IsMkRBQUUsZ0JBQWdCOzs0RkFTckMsaUJBQWlCO2tCQVo3QixTQUFTOytCQUNFLFlBQVksV0FFYixDQUFDLG9CQUFvQixFQUFFLGdCQUFnQixDQUFDLGNBQ3JDLElBQUksa0JBRUEsQ0FBQzs0QkFDZixTQUFTLEVBQUUsb0JBQW9COzRCQUMvQixNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQzt5QkFDakUsQ0FBQyxtQkFDZSx1QkFBdUIsQ0FBQyxNQUFNO3dEQWNSLG1CQUFtQjtzQkFBekQsZUFBZTt1QkFBQyxvQkFBb0I7Z0JBS0UsTUFBTTtzQkFBNUMsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUU7Z0JBTUcsSUFBSTtzQkFBM0MsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFNRSxLQUFLO3NCQUE1QyxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQUVaLFdBQVc7c0JBQXBDLFdBQVc7dUJBQUMsT0FBTztnQkFRYSxTQUFTO3NCQUF6QyxXQUFXO3VCQUFDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1RlbXBsYXRlT3V0bGV0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIGJvb2xlYW5BdHRyaWJ1dGUsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIGluamVjdCxcbiAgSW5wdXQsXG4gIG51bWJlckF0dHJpYnV0ZSxcbiAgUXVlcnlMaXN0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSVByb2dyZXNzIH0gZnJvbSAnLi9wcm9ncmVzcy50eXBlJztcbmltcG9ydCB7IFByb2dyZXNzQmFyQ29tcG9uZW50IH0gZnJvbSAnLi9wcm9ncmVzcy1iYXIuY29tcG9uZW50JztcbmltcG9ydCB7IFByb2dyZXNzQmFyRGlyZWN0aXZlIH0gZnJvbSAnLi9wcm9ncmVzcy1iYXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IFByb2dyZXNzU3RhY2tlZENvbXBvbmVudCB9IGZyb20gJy4vcHJvZ3Jlc3Mtc3RhY2tlZC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjLXByb2dyZXNzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Byb2dyZXNzLmNvbXBvbmVudC5odG1sJyxcbiAgaW1wb3J0czogW1Byb2dyZXNzQmFyQ29tcG9uZW50LCBOZ1RlbXBsYXRlT3V0bGV0XSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVVcmw6ICcuL3Byb2dyZXNzLmNvbXBvbmVudC5zY3NzJyxcbiAgaG9zdERpcmVjdGl2ZXM6IFt7XG4gICAgZGlyZWN0aXZlOiBQcm9ncmVzc0JhckRpcmVjdGl2ZSxcbiAgICBpbnB1dHM6IFsnYW5pbWF0ZWQnLCAnY29sb3InLCAnbWF4JywgJ3JvbGUnLCAndmFsdWUnLCAndmFyaWFudCddXG4gIH1dLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc0NvbXBvbmVudCBpbXBsZW1lbnRzIElQcm9ncmVzcyB7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHBiZDogUHJvZ3Jlc3NCYXJEaXJlY3RpdmUgfCBudWxsID0gaW5qZWN0KFByb2dyZXNzQmFyRGlyZWN0aXZlLCB7IG9wdGlvbmFsOiB0cnVlIH0pO1xuICByZWFkb25seSAjc3RhY2tlZD86IGJvb2xlYW4gPSBpbmplY3QoUHJvZ3Jlc3NTdGFja2VkQ29tcG9uZW50LCB7IG9wdGlvbmFsOiB0cnVlIH0pPy5zdGFja2VkO1xuICByZWFkb25seSAjZWxlbWVudFJlZiA9IGluamVjdChFbGVtZW50UmVmKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAodGhpcy5wYmQpIHtcbiAgICAgIHRoaXMucGJkLnN0YWNrZWQgPSB0aGlzLiNzdGFja2VkO1xuICAgIH1cbiAgfVxuXG4gIEBDb250ZW50Q2hpbGRyZW4oUHJvZ3Jlc3NCYXJDb21wb25lbnQpIGNvbnRlbnRQcm9ncmVzc0JhcnMhOiBRdWVyeUxpc3Q8UHJvZ3Jlc3NCYXJDb21wb25lbnQ+O1xuICAvKipcbiAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBjb21wb25lbnQuIElmIHlvdSBzZXQgdGhhdCB2YWx1ZSB0aGUgaW5uZXIgYDxDUHJvZ3Jlc3NCYXI+YCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVzaXplIGFjY29yZGluZ2x5LlxuICAgKiBAdHlwZSBudW1iZXJcbiAgICovXG4gIEBJbnB1dCh7IHRyYW5zZm9ybTogbnVtYmVyQXR0cmlidXRlIH0pIGhlaWdodDogbnVtYmVyID0gMDtcblxuICAvKipcbiAgICogRGlzcGxheXMgdGhpbiBwcm9ncmVzcy5cbiAgICogQHR5cGUgYm9vbGVhblxuICAgKi9cbiAgQElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pIHRoaW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBkZWZhdWx0IGNvbG9yIHRvIHdoaXRlLlxuICAgKiBAdHlwZSBib29sZWFuXG4gICAqL1xuICBASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSkgd2hpdGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgZ2V0IGhvc3RDbGFzc2VzKCk6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvZ3Jlc3M6IHRydWUsXG4gICAgICAncHJvZ3Jlc3MtdGhpbic6IHRoaXMudGhpbixcbiAgICAgICdwcm9ncmVzcy13aGl0ZSc6IHRoaXMud2hpdGVcbiAgICB9O1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5oZWlnaHQnKSBnZXQgaG9zdFN0eWxlKCk6IGFueSB7XG4gICAgcmV0dXJuICEhdGhpcy5oZWlnaHQgPyBgJHt0aGlzLmhlaWdodH1weGAgOiB0aGlzLiNlbGVtZW50UmVmPy5uYXRpdmVFbGVtZW50Py5zdHlsZT8uaGVpZ2h0ID8/IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwiQGlmIChjb250ZW50UHJvZ3Jlc3NCYXJzLmxlbmd0aCkge1xuICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiZGVmYXVsdENvbnRlbnRcIiAvPlxufSBAZWxzZSBpZiAocGJkPy5zdGFja2VkKSB7XG4gIDxjLXByb2dyZXNzLWJhciBbYW5pbWF0ZWRdPVwicGJkPy5hbmltYXRlZFwiIFt2YXJpYW50XT1cInBiZD8udmFyaWFudFwiIFtjb2xvcl09XCJwYmQ/LmNvbG9yXCIgc3RhY2tlZD5cbiAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiZGVmYXVsdENvbnRlbnRcIiAvPlxuICA8L2MtcHJvZ3Jlc3MtYmFyPlxufSBAZWxzZSB7XG4gIDxjLXByb2dyZXNzLWJhciBbd2lkdGhdPVwicGJkPy5wZXJjZW50KClcIiBbYW5pbWF0ZWRdPVwicGJkPy5hbmltYXRlZFwiIFt2YXJpYW50XT1cInBiZD8udmFyaWFudFwiIFtjb2xvcl09XCJwYmQ/LmNvbG9yXCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cImRlZmF1bHRDb250ZW50XCIgLz5cbiAgPC9jLXByb2dyZXNzLWJhcj5cbn1cblxuPG5nLXRlbXBsYXRlICNkZWZhdWx0Q29udGVudD5cbiAgPG5nLWNvbnRlbnQgLz5cbjwvbmctdGVtcGxhdGU+XG5cbiJdfQ==