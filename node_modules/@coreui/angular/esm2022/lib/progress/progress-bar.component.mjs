import { ChangeDetectionStrategy, Component, HostBinding, inject } from '@angular/core';
import { ProgressBarDirective } from './progress-bar.directive';
import * as i0 from "@angular/core";
import * as i1 from "./progress-bar.directive";
export class ProgressBarComponent {
    #progressBarDirective = inject(ProgressBarDirective, { optional: true });
    get hostClasses() {
        const animated = this.#progressBarDirective?.animated;
        const color = this.#progressBarDirective?.color;
        const variant = this.#progressBarDirective?.variant;
        return {
            'progress-bar': true,
            'progress-bar-animated': !!animated,
            [`progress-bar-${variant}`]: !!variant,
            [`bg-${color}`]: !!color
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: ProgressBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: ProgressBarComponent, isStandalone: true, selector: "c-progress-bar", host: { properties: { "class": "this.hostClasses" } }, hostDirectives: [{ directive: i1.ProgressBarDirective, inputs: ["animated", "animated", "color", "color", "max", "max", "role", "role", "stacked", "stacked", "value", "value", "variant", "variant", "width", "width"] }], ngImport: i0, template: '<ng-content />', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: ProgressBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'c-progress-bar',
                    template: '<ng-content />',
                    standalone: true,
                    hostDirectives: [{
                            directive: ProgressBarDirective,
                            inputs: ['animated', 'color', 'max', 'role', 'stacked', 'value', 'variant', 'width']
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvcHJvZ3Jlc3MvcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQVloRSxNQUFNLE9BQU8sb0JBQW9CO0lBRXRCLHFCQUFxQixHQUFnQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUUvRyxJQUNJLFdBQVc7UUFDYixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsUUFBUSxDQUFDO1FBQ3RELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUM7UUFDaEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLE9BQU8sQ0FBQztRQUNwRCxPQUFPO1lBQ0wsY0FBYyxFQUFFLElBQUk7WUFDcEIsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLFFBQVE7WUFDbkMsQ0FBQyxnQkFBZ0IsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTztZQUN0QyxDQUFDLE1BQU0sS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSztTQUN6QixDQUFDO0lBQ0osQ0FBQzsrR0FmVSxvQkFBb0I7bUdBQXBCLG9CQUFvQiw2VkFSckIsZ0JBQWdCOzs0RkFRZixvQkFBb0I7a0JBVmhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLGNBQWMsRUFBRSxDQUFDOzRCQUNmLFNBQVMsRUFBRSxvQkFBb0I7NEJBQy9CLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUM7eUJBQ3JGLENBQUM7b0JBQ0YsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzhCQU1LLFdBQVc7c0JBRGQsV0FBVzt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJvZ3Jlc3NCYXJEaXJlY3RpdmUgfSBmcm9tICcuL3Byb2dyZXNzLWJhci5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjLXByb2dyZXNzLWJhcicsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQgLz4nLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBob3N0RGlyZWN0aXZlczogW3tcbiAgICBkaXJlY3RpdmU6IFByb2dyZXNzQmFyRGlyZWN0aXZlLFxuICAgIGlucHV0czogWydhbmltYXRlZCcsICdjb2xvcicsICdtYXgnLCAncm9sZScsICdzdGFja2VkJywgJ3ZhbHVlJywgJ3ZhcmlhbnQnLCAnd2lkdGgnXVxuICB9XSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NCYXJDb21wb25lbnQge1xuXG4gIHJlYWRvbmx5ICNwcm9ncmVzc0JhckRpcmVjdGl2ZTogUHJvZ3Jlc3NCYXJEaXJlY3RpdmUgfCBudWxsID0gaW5qZWN0KFByb2dyZXNzQmFyRGlyZWN0aXZlLCB7IG9wdGlvbmFsOiB0cnVlIH0pO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICBnZXQgaG9zdENsYXNzZXMoKTogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4ge1xuICAgIGNvbnN0IGFuaW1hdGVkID0gdGhpcy4jcHJvZ3Jlc3NCYXJEaXJlY3RpdmU/LmFuaW1hdGVkO1xuICAgIGNvbnN0IGNvbG9yID0gdGhpcy4jcHJvZ3Jlc3NCYXJEaXJlY3RpdmU/LmNvbG9yO1xuICAgIGNvbnN0IHZhcmlhbnQgPSB0aGlzLiNwcm9ncmVzc0JhckRpcmVjdGl2ZT8udmFyaWFudDtcbiAgICByZXR1cm4ge1xuICAgICAgJ3Byb2dyZXNzLWJhcic6IHRydWUsXG4gICAgICAncHJvZ3Jlc3MtYmFyLWFuaW1hdGVkJzogISFhbmltYXRlZCxcbiAgICAgIFtgcHJvZ3Jlc3MtYmFyLSR7dmFyaWFudH1gXTogISF2YXJpYW50LFxuICAgICAgW2BiZy0ke2NvbG9yfWBdOiAhIWNvbG9yXG4gICAgfTtcbiAgfVxufVxuIl19